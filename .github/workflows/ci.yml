name: CI

on:
  schedule:
    - cron: "0 1 * * *"
  push:
    branches: [master]
  pull_request:
    branches: "**"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [12.16.3]
        yarn: [1.19.1]

    steps:
      - name: Build editors
        if: matrix.os == 'ubuntu-latest'
        run: |
          git clone https://github.com/kiegroup/droolsjbpm-build-bootstrap.git
          git clone https://github.com/kiegroup/kie-soup.git
          git clone https://github.com/kiegroup/appformer.git
          git clone https://github.com/paulovmr/kie-wb-common.git
          cd droolsjbpm-build-bootstrap
          mvn clean install -DskipTests=true -Dgwt.compiler.skip=true -Denforcer.skip=true
          cd ../kie-soup
          mvn clean install -DskipTests=true -Dgwt.compiler.skip=true -Denforcer.skip=true
          cd ../appformer
          mvn clean install -DskipTests=true -Dgwt.compiler.skip=true -Denforcer.skip=true
          cd ../kie-wb-common
          mvn clean install -DskipTests=true -Denforcer.skip=true -pl kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime -am
          mvn clean install -DskipTests=true -Denforcer.skip=true -pl kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime -am
          cd ..

      - name: Upload DMN editor (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: dmn-editor
          path: kie-wb-common/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/target/kie-wb-common-dmn-webapp-kogito-runtime

      - name: Upload BPMN editor (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: bpmn-editor
          path: kie-wb-common/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/target/kie-wb-common-stunner-bpmn-kogito-runtime

      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      # This bash script will set an output version for this step. It can be used with steps.version.outputs.version
      - name: Output version
        id: version
        run: |
          echo ::set-output name=version::$(node -e "console.log(require('./lerna.json').version);")
        shell: bash

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Yarn
        run: npm install -g yarn@${{ matrix.yarn }}

      - name: Start Xvfb (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Download dependencies
        run: yarn run init

      - name: Check yarn.lock md5
        id: check-yarn-lock-md5
        if: matrix.os == 'ubuntu-latest'
        run: |
          git diff yarn.lock;
          [ "0" == "$(git diff yarn.lock | wc -l)" ]
        shell: bash

      - name: "Build :: prod and pack"
        run: yarn run build:prod
        env:
          DISPLAY: ":99.0"

      - name: Upload VSCode Extension (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: vscode-extension
          path: packages/vscode-extension-pack-kogito-kie-editors/dist/vscode_extension_kogito_kie_editors_${{ steps.version.outputs.version }}.vsix

      - name: Upload Chrome Extension (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: chrome-extension
          path: packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ steps.version.outputs.version }}.zip

      - name: Upload Desktop App - Ubuntu (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: desktop-app-linux
          path: "packages/desktop/out/Business Modeler Preview-linux-x64.tar.gz"

      - name: Upload Desktop App - macOS (macOS only)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v1
        with:
          name: desktop-app-macos
          path: "packages/desktop/out/Business Modeler Preview-darwin-x64.zip"

      - name: Upload Desktop App - Windows (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v1
        with:
          name: desktop-app-windows
          path: "packages/desktop/out/Business Modeler Preview-win32-x64"

      - name: Upload Hub App - Ubuntu (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: hub-app-linux
          path: "packages/hub/out/Business Modeler Hub Preview-linux-x64.tar.gz"

      - name: Upload Hub App - macOS (macOS only)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v1
        with:
          name: hub-app-macos
          path: "packages/hub/out/Business Modeler Hub Preview-darwin-x64.zip"

      - name: Upload Hub App - Windows (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v1
        with:
          name: hub-app-windows
          path: "packages/hub/out/Business Modeler Hub Preview-win32-x64"
